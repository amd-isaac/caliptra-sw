name: HW Release

on:
  # Workflow runs when a main branch PR is created
  #pull_request:
  #  branches: [ main ]

  # Workflow can also be run manually
  workflow_dispatch:

jobs:
  variables:
    name: Build Variables
    runs-on: ubuntu-22.04
    outputs:
      date_str: ${{ steps.date.outputs.date }}

    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  update-rtl:
    name: Update RTL Submodule
    runs-on: ubuntu-22.04
    needs: variables
    outputs:
      branch_name: ${{ steps.branch.outputs.branch }}
      ci_checks_needed: ${{ steps.status.outputs.status }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Update the Caliptra RTL submodule and rebuild registers
        run: |
          git submodule update --remote hw-latest/caliptra-rtl
          cargo run --release --manifest-path registers/bin/generator/Cargo.toml -- hw-latest/caliptra-rtl registers/src/

      # FIXME: Remove this
      - name: Add a test change that will still let us build...
        run: |
          echo "# This is a test" >> Cargo.toml

      - name: Find available branch name
        id: branch
        run: |
          BRANCH_BASE=ci_rtl_${{ needs.variables.outputs.date_str }}
          INDEX=0
          while git ls-remote --exit-code --heads origin ${BRANCH_BASE}_${INDEX}
          do
              ((INDEX+=1))
          done
          echo "branch=${BRANCH_BASE}_${INDEX}" >> $GITHUB_OUTPUT

      - name: Run git status
        id: status
        run: echo "status=$(git status -s | head -1)" >> $GITHUB_OUTPUT

      # If there's a new HW release (submodule has been updated), add a commit to main branch
      - name: Commit changes
        if: ${{ steps.status.outputs.status }}
        run: |
          git config --global user.name "GitHub CI"
          git config --global user.email "username@users.noreply.github.com"
          git checkout -b ${{ steps.branch.outputs.branch }}
          git commit -a -m "CI: Update Caliptra RTL"
          git push -u origin ${{ steps.branch.outputs.branch }}

  build-test:
    uses: amd-isaac/caliptra-sw/.github/workflows/build-test.yml@isaac_nightly_release
    needs: [variables, update-rtl]
    if: needs.update-rtl.outputs.ci_checks_needed
    with:
      ref: ${{ needs.update-rtl.outputs.branch_name }}

  build-test-verilator:
    uses: amd-isaac/caliptra-sw/.github/workflows/build-test-verilator.yml@isaac_nightly_release
    needs: [variables, update-rtl]
    if: needs.update-rtl.outputs.ci_checks_needed
    with:
      ref: ${{ needs.update-rtl.outputs.branch_name }}

  merge-rtl-update:
    name: Merge RTL Update
    needs: [variables, update-rtl, build-test, build-test-verilator]
    if: needs.update-rtl.outputs.ci_checks_needed
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          ref: ${{ needs.update-rtl.outputs.branch_name }}

      - name: Merge RTL changes to main branch
        run: |
          git config --global user.name "GitHub CI"
          git config --global user.email "username@users.noreply.github.com"
          git checkout main
          git merge ${{ needs.update-rtl.outputs.branch_name }}
          git push origin main
          git push origin --delete ${{ needs.update-rtl.outputs.branch_name }}

  find-latest-release:
    name: Find Latest Release
    needs: merge-rtl-update
    runs-on: ubuntu-22.04
    outputs:
      create_release: ${{ steps.find.outputs.create_release }}
      new_release_tag: ${{ steps.find.outputs.new_release_tag }}
      release_ref: ${{ steps.find.outputs.release_ref }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Find latest release
        id: find
        run: |
          git config --global user.name "GitHub CI"
          git config --global user.email "username@users.noreply.github.com"
          git checkout main
          TAG_BASE=release_v
          INDEX=0
          MOST_RECENT_RELEASE=None
          while git tag | grep ${TAG_BASE}${INDEX}
          do
              MOST_RECENT_RELEASE=$(git tag | grep ${TAG_BASE}${INDEX} | head -1)
              ((INDEX+=1))
          done
          if [[ "$MOST_RECENT_RELEASE" == "None" ]]; then
              echo "create_release=true" >> $GITHUB_OUTPUT
          else
              COMMITS_AFTER_LAST_RELEASE=$(git rev-list --count $MOST_RECENT_RELEASE..HEAD)
              if [[ $COMMITS_AFTER_LAST_RELEASE -gt 0 ]]; then
                  echo "create_release=true" >> $GITHUB_OUTPUT
              else
                  echo "create_release=false" >> $GITHUB_OUTPUT
              fi
          fi
          echo "new_release_tag=${TAG_BASE}${INDEX}" >> $GITHUB_OUTPUT
          echo "release_ref=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  verilator-full-suite:
    name: Nightly Verilator Suite
    needs: find-latest-release
    if: needs.find-latest-release.outputs.create_release
    uses: amd-isaac/caliptra-sw/.github/workflows/nightly-verilator.yml@isaac_nightly_release
    with:
      ref: ${{ needs.find-latest-release.outputs.release_ref }}

  create-release:
    name: Create New Release
    needs: [variables, find-latest-release, verilator-full-suite]
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
          ref: ${{ needs.find-latest-release.outputs.release_ref }}

      # FIXME: Use the correct release generation process here
      - name: Generate release zip
        run: |
          mkdir /tmp/hw_release_${{ needs.variables.outputs.date_str }}
          cp target/riscv32imc-unknown-none-elf/firmware/caliptra-rom /tmp/hw_release_${{ needs.variables.outputs.date_str }}

      # FIXME: Tag with the correct "next release number"
      - name: Upload release
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: /tmp/hw_release_${{ needs.variables.outputs.date_str }}/caliptra-rom

      - name: Tag repo with new release number
        run: |
          git config --global user.name "GitHub CI"
          git config --global user.email "username@users.noreply.github.com"
          git checkout main
          git tag ${{ needs.find-latest-release.outputs.new_release_tag }}
          git push origin ${{ needs.find-latest-release.outputs.new_release_tag }}


